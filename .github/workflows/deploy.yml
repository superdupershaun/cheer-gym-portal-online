# This workflow will build a Node.js project and deploy it to GitHub Pages.

name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout your repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Clean build environment (remove node_modules and dist)
        run: |
          rm -rf node_modules
          rm -rf dist

      - name: Install dependencies
        run: npm install

      - name: Build React app
        run: npm run build

      # --- IMPORTANT: NEW STEP TO FIX CSS LINK ---
      - name: Fix CSS Link in index.html for GitHub Pages
        run: |
          # Find the actual hashed CSS file name in the dist/assets directory
          CSS_FILE=$(find dist/assets -name "index-*.css" | head -n 1)
          
          # Check if a CSS file was found
          if [ -z "$CSS_FILE" ]; then
            echo "Error: No hashed CSS file found in dist/assets."
            exit 1
          fi

          # Extract just the filename (e.g., index-DzQFRGGw.css)
          CSS_FILENAME=$(basename "$CSS_FILE")
          
          # Replace the placeholder CSS link in index.html with the correct hashed filename
          # We will use a placeholder like <link rel="stylesheet" href="CSS_PLACEHOLDER_URL"> in public/index.html
          # and then replace it here.
          # First, ensure public/index.html has the placeholder.
          # If public/index.html expects a path like `./assets/index.css` it won't be replaced directly.
          # We need to make public/index.html flexible for this.
          # Let's simplify the public/index.html and let Vite inject, then modify the _injected_ link.

          # Read the built index.html
          INDEX_HTML_CONTENT=$(cat dist/index.html)

          # Replace the generated CSS link with the correct relative path using the actual filename
          # This assumes Vite generates a link that looks like <link rel="stylesheet" href="/assets/index-HASH.css"> or similar
          # We need to target the <link> tag that Vite puts in.
          # This approach will find the <link> tag that Vite puts and replace its href.
          # This requires regex and sed, which can be tricky.
          # A more reliable way: make Vite output a static CSS name or search for the dynamically generated name.

          # Let's verify what Vite outputs in dist/index.html after the previous step (vite.config.js - Fixed CSS Naming).
          # It should now link to /assets/index.css
          # So, the fix is to make sure the base path is prepended.

          # The issue is likely that <link rel="stylesheet" href="/assets/index.css"> becomes superdupershaun.github.io/assets/index.css (404)
          # instead of superdupershaun.github.io/cheer-gym-portal-online/assets/index.css (200)

          # Let's manually replace the absolute path with a relative path in the built HTML
          # The previous Vite config with assetFileNames: 'assets/index.css' should have fixed the hashing.
          # So the issue is still the absolute path generated by Vite.

          # FIND THE HASHED CSS FILE AFTER BUILD
          HASHED_CSS_PATH=$(find dist/assets -name "index-*.css" | head -n 1)
          if [ -z "$HASHED_CSS_PATH" ]; then
            echo "Error: Hashed CSS file not found in dist/assets."
            exit 1
          fi
          # Extract just the filename (e.g., index-DzQFRGGw.css)
          HASHED_CSS_FILENAME=$(basename "$HASHED_CSS_PATH")

          # Replace the CSS link in dist/index.html
          # Use `sed` to replace the generated link path with the correct relative path.
          # This assumes Vite generates a link like `<link rel="stylesheet" href="/assets/index-HASH.css">`
          # We need to ensure it becomes `<link rel="stylesheet" href="./assets/index-HASH.css">`
          # or `assets/index-HASH.css` relative to the index.html
          
          # More robust sed: find a link to any CSS file and correct its path
          sed -i "s|<link rel=\"stylesheet\" href=\"/assets/${HASHED_CSS_FILENAME}\">|<link rel=\"stylesheet\" href=\"./assets/${HASHED_CSS_FILENAME}\">|g" dist/index.html || \
          sed -i "s|<link rel=\"stylesheet\" href=\"/assets/index.css\">|<link rel=\"stylesheet\" href=\"./assets/index.css\">|g" dist/index.html || \
          sed -i "s|<link rel=\"stylesheet\" href=\"index.css\">|<link rel=\"stylesheet\" href=\"./index.css\">|g" dist/index.html


          # --- ALSO FIX JS LINK IF NECESSARY (often has same issue) ---
          # Find the actual hashed JS file name (main.jsx -> index-HASH.js)
          HASHED_JS_PATH=$(find dist/assets -name "index-*.js" | head -n 1)
          if [ -z "$HASHED_JS_PATH" ]; then
            echo "Error: Hashed JS file not found in dist/assets."
            exit 1
          fi
          HASHED_JS_FILENAME=$(basename "$HASHED_JS_PATH")

          # Replace the JS script link in dist/index.html
          sed -i "s|<script type=\"module\" src=\"/assets/${HASHED_JS_FILENAME}\"></script>|<script type=\"module\" src=\"./assets/${HASHED_JS_FILENAME}\"></script>|g" dist/index.html || \
          sed -i "s|<script type=\"module\" src=\"/src/main.jsx\"></script>|<script type=\"module\" src=\"./assets/${HASHED_JS_FILENAME}\"></script>|g" dist/index.html || \
          sed -i "s|<script type=\"module\" src=\"index.js\"></script>|<script type=\"module\" src=\"./index.js\"></script>|g" dist/index.html

          echo "Corrected CSS and JS links in dist/index.html"
          cat dist/index.html # Print the modified HTML for debugging
          # --- END NEW STEP ---

      - name: Upload production-ready build artifacts for deployment
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist # Specify the directory where your built files are located

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
